heat_template_version: 2016-10-14

description: >
  API node template for deployment of OpenStack.

parameters:
  ssh_key_name:
    description: The name of the SSH key in OpenStack to add to hosts.
    type: string
  api_node_flavor:
    description: The flavor to use for the VMs running OpenStack APIs.
    type: string
  api_node_image:
    description: The image to use for the VMs running OpenStack APIs.
    type: string
  api_node_names:
    type: comma_delimited_list
  index:
    type: number
  ext_network_name:
    description: The network to use for the VMs.
    type: string
  mgmt_network_name:
    description: The network to use for the VMs.
    type: string
  hb_network_name:
    description: The network to use for heartbeats.
    type: string
  floating_ip_pool:
    type: string
    label: Floating IP pool
    description: The pool from which floating IPs should be reserved.
    default: 'public'
  ooo_frontend_secgroup:
    type: string
  cloud_init_nameservers:
    type: comma_delimited_list
    description: The nameservers to configure via cloud-init.

resources:
  api_node:
    type: OS::Nova::Server
    properties:
      flavor: { get_param: api_node_flavor }
      image: { get_param: api_node_image }
      key_name: { get_param: ssh_key_name }
# If networks.port is present, secgroup definition can't be here
#      security_groups:
#        - { get_param: ooo_frontend_secgroup }
      name: { get_param: [api_node_names, {get_param: index}] }
      networks:
        - port: { get_resource: api_ext_port}
        - network: { get_param: mgmt_network_name }
        - network: { get_param: hb_network_name }
      metadata: { 'ansible_group': 'api' }
      user_data_format: RAW
      user_data:
        str_replace:
          params:
            $hostname: { get_param: [api_node_names, {get_param: index}] }
            $nameservers: { get_param: cloud_init_nameservers }
          template: { get_file: user-data-api.yaml }

  api_ext_port:
    type: OS::Neutron::Port
    properties:
      network: { get_param: ext_network_name }
      fixed_ips:
        - subnet: { get_param: ext_subnet_name }
      security_groups:
        - { get_param: ooo_frontend_secgroup }

  api_public_ip_neutron:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: { get_param: floating_ip_pool }

  api_floating_ip_association_neutron:
    type: OS::Neutron::FloatingIPAssociation
    properties:
      floatingip_id: { get_resource: api_public_ip_neutron }
      port_id: {get_attr: [api_node, addresses, {get_param: ext_network_name}, 0, port]}

outputs:
  show:
    value: {get_attr: [api_node, show]}
