---
# First we run Puppet on the "primary" API node. This is a necessary step as
# opposed to just running it on all at the same time, since setting up DRBD and
# Pacemaker must be done this way.
- hosts: api[0]
  become: true
  become_user: root
  pre_tasks:
# workaround: selinux blocks rabbitmq HiPE compilation
    - shell: sed -i 's/^SELINUX=.*/SELINUX=disabled/' /etc/selinux/config;reboot
      args:
        creates: /usr/bin/pip-python
      ignore_errors: true
    - meta: clear_host_errors
# workaround: pip provider fails
    - shell: ln -s /usr/bin/pip /usr/bin/pip-python
      args:
        creates: /usr/bin/pip-python
# workaround: create NFS share for glance
    - file:
        path: /mnt/glance_nfs/cloud_devel
        state: directory
        recurse: yes
        mode: 0755
  roles:
    - { role: ansible-role-nfs, nfs_exports: { "/mnt/glance_nfs/cloud_devel *(rw,sync,no_root_squash)" } }
    - { role: ansible-role-puppetize, ansible_fqdn: "{{inventory_hostname_short}}.openstacklocal" }

# Then we run Puppet on the rest of the API nodes.
- hosts: api:!api[0]
  become: true
  become_user: root
  roles:
    - { role: ansible-role-puppetize, ansible_fqdn: "{{inventory_hostname_short}}.openstacklocal" }

# Finally we run Puppet on the API servers once more. This is to make sure any
# changes created by the Puppet runs to the PuppetDB get propagated. This also
# turns fencing on on these servers.
- hosts: api
  become: true
  become_user: root
  roles:
    - { role: ansible-role-puppetize, ansible_fqdn: "{{inventory_hostname_short}}.openstacklocal" }
